#!/bin/bash

if [[ -z "${PLAY_COMMAND}" ]]; then
    PLAY_COMMAND=aplaymidi
fi
if [[ -z "${PLAY_PARAM}" ]]; then
    PLAY_PARAM="-d 0 -p $(aplaymidi -l | grep ":" | grep -v "Midi Through" | head -n 1 | cut -d " " -f 2)"
fi
if [[ -z "${PLAY_INTRO}" ]]; then
    PLAY_INTRO="intro.mid"
fi
if [[ -z "${PLAY_IDLE_LOOP}" ]]; then
    PLAY_IDLE_LOOP="idle.mid"
fi
if [[ -z "${PLAY_MAIN}" ]]; then
    PLAY_MAIN="main"
fi
if [[ -z "${SENSOR}" ]]; then
    SENSOR="27"
fi
if [[ -z "${RESET_TIMEOUT}" ]]; then
    RESET_TIMEOUT="0s"
fi
if [[ -z "${MASTER_HOST}" ]]; then
    MASTER_HOST="localhost"
fi

if [[ -z "${TRIGGER_HOST}" ]]; then
    TRIGGER_HOST=$MASTER_HOST
fi

echo "Trigger script: $PLAY_COMMAND $PLAY_PARAM. Sensor: $SENSOR, timeout: $RESET_TIMEOUT"
echo "Intro: $PLAY_INTRO Idle: $PLAY_IDLE_LOOP Main: $PLAY_MAIN"
echo "Master host: $MASTER_HOST Trigger host: $TRIGGER_HOST"

function send_gpio {
    PREV_STATE="0"
    while true; do
        STATE=$(cat $SENSOR_FILE)
        if [[ $STATE != $PREV_STATE ]]; then
            echo "state changed to $STATE"

            mosquitto_pub -h $MASTER_HOST -t "/$HOSTNAME/trigger" -m $STATE
            PREV_STATE=$STATE
        fi

        sleep 0.1s
    done
}

TMP_SENSOR_FILE="/tmp/bydefault-trigger-sensor"

function receive_gpio {
    echo "receiving gpio state"

    echo "0" > $TMP_SENSOR_FILE
    echo "tmp file: $(cat $TMP_SENSOR_FILE)"

    while true; do
        # TODO: master host not equal trigger source
        STATE=$(mosquitto_sub -h $MASTER_HOST -t "/$TRIGGER_HOST/trigger" -C 1 -N)
        echo "new state $STATE"
        echo $STATE > $TMP_SENSOR_FILE
        echo "get message $(cat $TMP_SENSOR_FILE)"
    done
}

if [[ -n "${MQTT_SLAVE}" ]]; then
    echo "run in mqtt slave mode"

    SENSOR_FILE=$TMP_SENSOR_FILE
    receive_gpio &
else
    echo "run in trigger master mode"
    raspi-gpio set $SENSOR ip pd
    if [[ ! -d /sys/class/gpio/gpio$SENSOR ]]; then
        echo $SENSOR >/sys/class/gpio/export
    fi

    SENSOR_FILE="/sys/class/gpio/gpio$SENSOR/value"
    send_gpio &
fi

$PLAY_COMMAND $PLAY_PARAM ./$PLAY_INTRO

function play_idle_loop {
    while true; do
        $PLAY_COMMAND $PLAY_PARAM ./$PLAY_IDLE_LOOP
    done
}

list_descendants () {
  local children=$(ps -o pid= --ppid "$1")

  for pid in $children; do
    list_descendants "$pid"
  done

  echo "$children"
}

while true; do
    # play intro, wait for sensor
    while [[ $(cat $SENSOR_FILE) == "0" ]]; do
        echo "play idle loop: $PLAY_IDLE_LOOP"
        play_idle_loop & IDLE_LOOP=$!

        while [[ $(cat $SENSOR_FILE) == "0" ]]; do sleep 0.2s; done
        kill $(list_descendants $IDLE_LOOP)
        kill $IDLE_LOOP
    done

    # play dir, check sensor
    for f in ./$PLAY_MAIN/*.mid; do
        echo "play main: $f"
        $PLAY_COMMAND $PLAY_PARAM "$f"
        if [[ $(cat $SENSOR_FILE) == "0" ]]; then
            echo "no sensor, wait for reset"
            sleep $RESET_TIMEOUT
            if [[ $(cat $SENSOR_FILE) == "0" ]]; then
                echo "reset sequence"
                break
            fi
        fi
    done
done
