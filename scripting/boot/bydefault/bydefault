#!/bin/bash

THIS_SCRIPT=$(readlink -f $0)
SCRIPT_DIR=$(dirname $THIS_SCRIPT)

trap ctrl_c INT

function find_usbflash {
    ls /dev/sd*1 2> /dev/null | head -1
}

list_descendants () {
  local children=$(ps -o pid= --ppid "$1")

  for pid in $children; do
    list_descendants "$pid"
  done

  echo "$children"
}

function kill_main_script {
    if [[ -n "${MAIN_SCRIPT}" ]]; then 
        if ps -p $MAIN_SCRIPT > /dev/null; then
            echo "kill $MAIN_SCRIPT"
            kill $(list_descendants $MAIN_SCRIPT)
            kill $MAIN_SCRIPT
        fi
    fi
}

function ctrl_c() {
    echo "go away by default"

    kill_main_script

    cd /
    if [[ -z $(find_usbflash) ]]; then
        sudo umount $USBFLASH_DIR
    fi
    exit 0
}

sudo bash -c "echo none >/sys/class/leds/led0/trigger"

USBFLASH_DIR=/usbflash
DEFAULT_DIR=/boot/bydefault/default-dir
DEFAULT_CONFIG=/boot/bydefault/default-config
SCRIPTS=/boot/bydefault/scripts

function handle_dir {
    set -a
    source $DEFAULT_CONFIG
    set +a

    echo "Load FS from $(pwd)"

    if [ -a "wifi" ]; then
        echo "update supplicant"
        set-rw
        sudo update-supplicant ./wifi
        set-ro
        sudo wpa_cli -i wlan0 reconfigure
    fi

    if [ -a "config" ]; then
        set -a
        source ./config
        set +a
        
        set-rw
        if [[ -n "${CONFIG_HOSTNAME}" ]]; then
            echo "update hostname to $CONFIG_HOSTNAME"
            sudo hostnamectl set-hostname $CONFIG_HOSTNAME
            sudo sed -i '/127.0.1.1/d' /etc/hosts
            sudo bash -c "echo '127.0.1.1 $CONFIG_HOSTNAME' >> /etc/hosts"
            sudo bash -c "echo '127.0.1.1 $CONFIG_HOSTNAME.local' >> /etc/hosts"
            sudo avahi-set-host-name $CONFIG_HOSTNAME

            # update AP name
            
            if [ -a "/etc/hostapd/hostapd.conf" ]; then
                echo "change ap ssid"
                sudo sed -i '/ssid/d' /etc/hostapd/hostapd.conf
                sudo bash -c "echo 'ssid=$CONFIG_HOSTNAME' >> /etc/hostapd/hostapd.conf"
                if [[ -n "${AP_PASS}" ]]; then
                    echo "change ap password"
                    set-rw
                    sudo sed -i '/wpa_passphrase/d' /etc/hostapd/hostapd.conf
                    sudo bash -c "echo 'wpa_passphrase=$AP_PASS' >> /etc/hostapd/hostapd.conf"
                    
                fi

                # TODO restart AP if AP is running
            fi
        fi
        set-ro
    fi

    if [ -a "start.sh" ]; then
        echo "start script exists, run"
        ./start.sh
    else
        echo "no start script, run [$SCRIPT]"
        $SCRIPTS/$SCRIPT
    fi
}

function mount_flash {
    if [[ ! -z $(find_usbflash) ]] && \
       [[ -d "$USBFLASH_DIR" ]] && \
       ([[ ! -z $(mount | grep $(find_usbflash)) ]] || sudo mount $(find_usbflash) $USBFLASH_DIR -o rw,uid=$USER,gid=$USER);
    then
        echo "$USBFLASH connected and mounted"

        # kill previous script
        kill_main_script

        cd $USBFLASH_DIR

        handle_dir & MAIN_SCRIPT=$!
        
        # wait for process exists and flash inserted
        while ps -p $MAIN_SCRIPT > /dev/null && [[ ! -z $(find_usbflash) ]]; do
            sudo bash -c "echo 1 >/sys/class/leds/led0/brightness"
            sleep 0.2s
            sudo bash -c "echo 0 >/sys/class/leds/led0/brightness"
            sleep 2s
        done

        echo "end of process or eject flash"

        if ps -p $MAIN_SCRIPT > /dev/null; then
            echo "kill $MAIN_SCRIPT"
            kill $(list_descendants $MAIN_SCRIPT)
            kill $MAIN_SCRIPT
        fi
        
        cd /
        if [[ -z $(find_usbflash) ]]; then
            echo "flash ejected"
            
            sudo umount $USBFLASH_DIR
        fi
    else
        if [[ -z "$USBFLASH" ]]; then $()
        elif [[ ! -d "$USBFLASH_DIR" ]]; then echo "$USBFLASH_DIR not exists";
        elif [[ ! -z $(mount | grep $(find_usbflash)) ]]; then echo "not already mounted";
        else echo "mount failed"; fi
        
        cd $DEFAULT_DIR
        
        handle_dir & MAIN_SCRIPT=$!

        # wait for process exists and flash inserted
        while ps -p $MAIN_SCRIPT > /dev/null && [[ -z $(find_usbflash) ]]; do
            sudo bash -c "echo 1 >/sys/class/leds/led0/brightness"
            sleep 0.01s
            sudo bash -c "echo 0 >/sys/class/leds/led0/brightness"
            sleep 2s
        done

        kill_main_script
    fi
}

echo "Start script by default"

# try to mount flash infinite
while true; do
    mount_flash
    sleep 1s
done
